import os
import json
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from datetime import datetime, timedelta

load_dotenv(r"C:\Users\Serge\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ø—Ä–æ–∫—Ç—ã\issue chat\issue_server\iventbot\sectert.env")

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = [int(os.getenv("YOUR_TELEGRAM_ID")), 2123680656]


BASE_DIR = r"C:\Users\Serge\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ø—Ä–æ–∫—Ç—ã\issue chat\issue_server\iventbot"
EVENTS_FILE = os.path.join(BASE_DIR, "ivents.json")


if not os.path.exists(EVENTS_FILE):
    with open(EVENTS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)

client = TelegramClient("iventsbot_new_session", API_ID, API_HASH)

def load_events():
    with open(EVENTS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_events(events):
    with open(EVENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(events, f, ensure_ascii=False, indent=2)

@client.on(events.NewMessage(pattern=r"^[/\.]start"))
async def start_handler(event):
    await event.respond(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞–º–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add –ù–∞–∑–≤–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞ | –¥–Ω–∏:—á–∞—Å—ã:–º–∏–Ω—É—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≤–µ–Ω—Ç\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤\n"
        "/delete –Ω–æ–º–µ—Ä ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≤–µ–Ω—Ç"
    )

@client.on(events.NewMessage(pattern=r"^[/\.]add"))
async def add_handler(event):
    if event.sender_id not in ADMINS:
        await event.respond("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–æ–≤.")
        return
    try:
        parts = event.raw_text.split(" ", 1)
        if len(parts) < 2:
            await event.respond("–ò—Å–ø–æ–ª—å–∑—É–π: `/add –ù–∞–∑–≤–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞ | –¥–Ω–∏:—á–∞—Å—ã:–º–∏–Ω—É—Ç`")
            return
        data = parts[1].split("|")
        if len(data) < 3:
            await event.respond("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å: –ù–∞–∑–≤–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞ | –¥–Ω–∏:—á–∞—Å—ã:–º–∏–Ω—É—Ç")
            return
        name = data[0].strip()
        link = data[1].strip()
        duration_str = data[2].strip()
        days, hours, minutes = map(int, duration_str.split(":"))
        end_time = datetime.now() + timedelta(days=days, hours=hours, minutes=minutes)
        end_time_str = end_time.isoformat()
        events_list = load_events()
        events_list.append({"name": name, "link": link, "end_time": end_time_str})
        save_events(events_list)
        await event.respond(
            f"‚úÖ –ò–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:\n\n<b>{name}</b>\nüîó {link}\n‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ {days}–¥ {hours}—á {minutes}–º",
            parse_mode="html"
        )
    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞: {e}")

@client.on(events.NewMessage(pattern=r"^[/\.]list"))
async def list_handler(event):
    events_list = load_events()
    if not events_list:
        await event.respond("üì≠ –°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    text = "üìå –¢–µ–∫—É—â–∏–µ –∏–≤–µ–Ω—Ç—ã:\n\n"
    for i, ev in enumerate(events_list, 1):
        end_dt = datetime.fromisoformat(ev['end_time'])
        diff = end_dt - datetime.now()
        days = diff.days
        hours = diff.seconds // 3600
        minutes = (diff.seconds % 3600) // 60
        text += f"{i}. <b>{ev['name']}</b>\nüîó {ev['link']}\n‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days}–¥ {hours}—á {minutes}–º\n\n"
    await event.respond(text, parse_mode="html")

@client.on(events.NewMessage(pattern=r"^[/\.]delete"))
async def delete_handler(event):
    if event.sender_id not in ADMINS:
        await event.respond("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–æ–≤.")
        return
    parts = event.raw_text.split(" ", 1)
    if len(parts) < 2 or not parts[1].isdigit():
        await event.respond("–ò—Å–ø–æ–ª—å–∑—É–π: `/delete –Ω–æ–º–µ—Ä`")
        return
    idx = int(parts[1]) - 1
    events_list = load_events()
    if idx < 0 or idx >= len(events_list):
        await event.respond("‚ùå –ù–µ—Ç –∏–≤–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return
    removed = events_list.pop(idx)
    save_events(events_list)
    await event.respond(f"üóëÔ∏è –ò–≤–µ–Ω—Ç <b>{removed['name']}</b> —É–¥–∞–ª–µ–Ω.", parse_mode="html")

async def main():
    await client.start(bot_token=BOT_TOKEN)
    me = await client.get_me()
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (id: {me.id})")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
