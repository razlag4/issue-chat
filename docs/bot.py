import os
import json
import shutil
import time
import pytz
import asyncio
from datetime import datetime
from telethon import TelegramClient, events, Button
from dotenv import load_dotenv


BASE_DIR = os.path.dirname(os.path.abspath(__file__)) 
load_dotenv(os.path.join(BASE_DIR, "serrc.env"))


try:
    API_ID = int(os.getenv("API_ID"))
    API_HASH = os.getenv("API_HASH")
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    CHAT_USERNAME = os.getenv("CHAT_USERNAME", "@CHAT_ISSUE")
    YOUR_TELEGRAM_ID = int(os.getenv("YOUR_TELEGRAM_ID", "380051255"))
except Exception as e:
    raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")



PHOTOS_DIR = os.path.join(BASE_DIR, "photos")       
USERS_FILE = os.path.join(BASE_DIR, "users.json")  
VOTES_FILE = os.path.join(BASE_DIR, "votes.json") 


client = TelegramClient("bot_session", API_ID, API_HASH)



if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = {}





last_info_time = {}

def load_users():
    try:
        with open(os.path.join(BASE_DIR, "users.json"), "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_users(users):
    with open(os.path.join(BASE_DIR, "users.json"), "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


def get_user(user_id):
    users = load_users()
    for user in users:
        if str(user.get('id')) == str(user_id):
            return user
    return None

async def update_first_name(user_id, new_name):
    users = load_users()
    for user in users:
        if str(user.get('id')) == str(user_id):
            user['first_name'] = new_name
            save_users(users)
            return
    users.append({
        "id": user_id,
        "first_name": new_name,
        "username": None,
        "hidden": False,
        "blocked": False
    })
    save_users(users)

async def change_name_by_id(user_id, new_name):
    await update_first_name(user_id, new_name)

async def hide_siteinfo(user_id):
    users = load_users()
    for user in users:
        if str(user.get('id')) == str(user_id):
            user['id'] = "—Å–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            user['username'] = "—Å–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            user['hidden'] = True
            save_users(users)
            return
    users.append({
        "id": "—Å–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        "username": "—Å–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        "first_name": "",
        "hidden": True,
        "blocked": False
    })
    save_users(users)

async def show_siteinfo(user_id, sender=None):
    users = load_users()
    real_id = sender.id if sender else user_id
    username = sender.username if sender else ""
    for user in users:
        if str(user.get('id')) == str(user_id) or user.get('id') == "—Å–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º":
            user['id'] = real_id
            user['username'] = username
            user['hidden'] = False
            if sender:
                user['first_name'] = sender.first_name
            save_users(users)
            return
    users.append({
        "id": real_id,
        "username": username,
        "first_name": sender.first_name if sender else "",
        "hidden": False,
        "blocked": False
    })
    save_users(users)

async def set_block_status(user_id, blocked=True):
    users = load_users()
    for user in users:
        if str(user.get('id')) == str(user_id):
            user['blocked'] = blocked
            save_users(users)
            return
    users.append({
        "id": user_id,
        "first_name": "",
        "username": "",
        "hidden": False,
        "blocked": blocked
    })
    save_users(users)

async def get_first_name(user_id):
    user = get_user(user_id)
    if user:
        return user.get('first_name')
    return None

async def is_blocked(user_id):
    user = get_user(user_id)
    return user.get('blocked', False) if user else False

VOTES_FILE = os.path.join(BASE_DIR, "votes.json")


def load_votes():
    try:
        with open(VOTES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_votes(votes):
    with open(VOTES_FILE, "w", encoding="utf-8") as f:
        json.dump(votes, f, ensure_ascii=False, indent=2)


NOMINATION_NAMES = [
    "¬´·¥®–∏·¥ã ç–∏ —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´·¥ß—é–±–∏ ç—á–∏·¥ã —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´·¥ã·¥©–∏–Ω–∂ —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´–±·¥ß—É–¥–Ω–∏—Ü·¥Ä —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´–±·¥Ä–±–Ω–∏·¥ã —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´–Ω·¥Ä·¥Ñ·¥õ–æ—è—â–∏–π –¥–∂·¥á–Ω·¥õ·¥á·¥ß—å ç·¥á–Ω —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´ ô·¥Ñ·¥á–∑–Ω·¥Ä–π·¥ã·¥Ä —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´—Ö—É·¥á·¥Ñ–æ·¥Ñ —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´–Ω—ã·¥õ–∏·¥ã —á·¥Ä·¥õ·¥Ä¬ª",
    "¬´œ∂·¥¶–æ–∏·¥Ñ·¥õ —á·¥Ä·¥õ·¥Ä¬ª",
]

NOMINATIONS = [
    f"—É·¥ã·¥Ä–∂–∏·¥õ·¥á …™·¥Ö –¥–æ ·¥õ·¥©·¥á—Ö —á·¥á·¥ß–æ ô·¥á·¥ã –Ω·¥Ä ·¥Ñ·¥ß·¥á–¥—É—é—â—É—é –Ω–æ ç–∏–Ω·¥Ä—Ü–∏—é:\n{name}"
    for name in NOMINATION_NAMES
]

user_states = {}

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.name\s+(.+)'))
async def change_name(event):
    user_id = event.sender_id
    if await is_blocked(user_id):
        await event.reply("‚ùå –¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–Ω—è—Ç—å –∏–º—è.")
        return
    new_name = event.pattern_match.group(1).strip()
    if len(new_name) > 25:
        await event.reply("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await update_first_name(user_id, new_name)
    await event.reply(f'‚úÖ –¢–≤–æ—ë –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{new_name}"')

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.-name'))
async def reset_name(event):
    user_id = event.sender_id
    if await is_blocked(user_id):
        await event.reply("‚ùå –¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–Ω—è—Ç—å –∏–º—è.")
        return
    new_name = event.sender.first_name
    await update_first_name(user_id, new_name)
    await event.reply(f'‚úÖ –¢–≤–æ—ë –∏–º—è —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ: "{new_name}"')

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.myname'))
async def myname(event):
    user_id = event.sender_id
    name = await get_first_name(user_id)
    if not name:
        name = event.sender.first_name
    await event.reply(f'‚ÑπÔ∏è –¢–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –∏–º—è –Ω–∞ —Å–∞–π—Ç–µ: {name}')

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.namechange\s+(\d+)\s+(.+)'))
async def namechange_handler(event):
    if event.sender_id != YOUR_TELEGRAM_ID:
        await event.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    target_id = event.pattern_match.group(1)
    new_name = event.pattern_match.group(2).strip()
    if new_name == "-name":
        for participant in await client.get_participants(CHAT_USERNAME):
            if str(participant.id) == str(target_id):
                new_name = participant.first_name
                break
    await change_name_by_id(target_id, new_name)
    await event.reply(f'‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{new_name}"')

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.-siteinfo\s*(\d*)'))
async def hide_info(event):
    if event.sender_id != YOUR_TELEGRAM_ID:
        await event.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    target_id = event.pattern_match.group(1) or event.sender_id
    await hide_siteinfo(target_id)
    await event.reply(f"üîí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} —Å–∫—Ä—ã—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ.")

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.\+siteinfo\s*(\d*)'))
async def show_info(event):
    if event.sender_id != YOUR_TELEGRAM_ID:
        await event.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    target_id = event.pattern_match.group(1) or event.sender_id
    await show_siteinfo(target_id, sender=event.sender)
    await event.reply(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.-user\s+(\d+)'))
async def block_user(event):
    if event.sender_id != YOUR_TELEGRAM_ID:
        await event.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    target_id = event.pattern_match.group(1)
    await set_block_status(target_id, blocked=True)
    await event.reply(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} —Ç–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –∏–º—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ID –Ω–∞ —Å–∞–π—Ç–µ.")

async def update_users_info():
    users = load_users()
    participants = await client.get_participants(CHAT_USERNAME)

    for participant in participants:
        user_id = str(participant.id)
        username = participant.username
        first_name = participant.first_name or ""
        photo_url = f"https://razlag4.github.io/Issue-photos/{user_id}.jpg"

        found = False
        for user in users:
            if str(user.get("id")) == user_id:
                user["username"] = username
                user["first_name"] = first_name
                user["photo"] = photo_url
                found = True
                break
        if not found:
            users.append({
                "id": user_id,
                "username": username,
                "first_name": first_name,
                "photo": photo_url,
                "hidden": False,
                "blocked": False
            })
    save_users(users)

async def periodic_photo_update():
    while True:
        try:
            await update_users_info()  
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∞–≤–∞—Ç–∞—Ä–∫–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", e)
        await asyncio.sleep(3600)  # 1 —á–∞—Å


@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.\+user\s+(\d+)'))
async def unblock_user(event):
    if event.sender_id != YOUR_TELEGRAM_ID:
        await event.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    target_id = event.pattern_match.group(1)
    await set_block_status(target_id, blocked=False)
    await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –∏–º—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ID –Ω–∞ —Å–∞–π—Ç–µ.")

@client.on(events.NewMessage(chats=CHAT_USERNAME, pattern=r'\.info'))
async def info_command(event):
    user_id = event.sender_id
    now = time.time()
    if user_id in last_info_time and now - last_info_time[user_id] < 15:
        await event.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.")
        return
    last_info_time[user_id] = now
    info_text = (
        ".name –∏–º—è ‚Äî –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –∏–º—è –Ω–∞ —Å–∞–π—Ç–µ\n"
        ".-name ‚Äî –≤–µ—Ä–Ω—É—Ç—å –∏–º—è –Ω–∞ —Ç–æ, —á—Ç–æ —Å—Ç–æ–∏—Ç –≤ —Ç–≥\n"
        ".myname ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –∏–º—è –Ω–∞ —Å–∞–π—Ç–µ\n"
        ".-siteinfo ‚Äî —Å–∫—Ä—ã—Ç—å —Å–≤–æ–π ID –∏ username –Ω–∞ —Å–∞–π—Ç–µ\n"
        ".+siteinfo ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π ID –∏ username –Ω–∞ —Å–∞–π—Ç–µ\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        ".namechange id –Ω–æ–≤–æ–µ_–∏–º—è ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID. –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –Ω–∞–ø–∏—Å–∞—Ç—å -name, –≤–µ—Ä–Ω—ë—Ç—Å—è –∏–º—è –∏–∑ —Ç–≥\n"
        ".-siteinfo id ‚Äî —Å–∫—Ä—ã—Ç—å ID –∏ username —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        ".+siteinfo id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å ID –∏ username —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        ".-user id ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—è—Ç—å –∏–º—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ID –Ω–∞ —Å–∞–π—Ç–µ\n"
        ".info ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ\n"
        ".+user id ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—è—Ç—å –∏–º—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ID –Ω–∞ —Å–∞–π—Ç–µ"
    )
    await event.reply(info_text)

@client.on(events.NewMessage(pattern="/start"))
async def start_handler(event):
    user_id = str(event.sender_id)
    votes = load_votes()

    if user_id in votes:
        await event.respond("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.")
        return

    user_states[user_id] = {"step": 0, "answers": []}

    await event.respond(
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "      ‚ú® –Ω–æ ô–æ·¥¶–æ–¥–Ω—è—è –Ω–æ ç–∏–Ω·¥Ä—Ü–∏—è ‚ú®\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "–æ·¥õ·¥ã·¥©—ã·¥õ–æ ·¥¶–æ·¥ß–æ·¥Ñ–æ ô·¥Ä–Ω–∏·¥á –Ω·¥Ä ·¥á–∂·¥á·¥¶–æ–¥–Ω—É—é –Ω–æ ç–∏–Ω·¥Ä—Ü–∏—é!\n\n"
        "–¥·¥ß—è —É—á·¥Ä·¥Ñ·¥õ–∏—è —É·¥ã·¥Ä–∂–∏·¥õ·¥á –æ·¥õ 1 –¥–æ 3 —á·¥á·¥ß–æ ô·¥á·¥ã –Ω·¥Ä  ô—ã–±·¥©·¥Ä–Ω–Ω—É—é ·¥ã·¥Ä·¥õ·¥á·¥¶–æ·¥©–∏—é.\n\n"
        "‚û§ –¥·¥ß—è —É–¥–æ–±·¥Ñ·¥õ ô·¥Ä –∏·¥Ñ·¥®–æ·¥ß—å–∑—É–π·¥õ·¥á ·¥Ñ·¥®–∏·¥Ñ–æ·¥ã …™·¥Ö:\n"
        "https://t.me/+DGoXpsnNmHM4MDUy\n"
        "(·¥Ñ·¥®–∏·¥Ñ–æ·¥ã ·¥®–æ·¥®–æ·¥ß–Ω—è·¥á·¥õ·¥Ñ—è –¥–æ 31.12.25)\n\n"
        "‚û§ ·¥ß–∏–±–æ –Ω·¥Ä·¥®–∏…Ø–∏·¥õ·¥á ·¥ã–æ ç·¥Ä–Ω–¥—É:\n"
        "¬´.–∏–¥¬ª ( ô –æ·¥õ ô·¥á·¥õ –Ω·¥Ä ·¥Ñ–æ–æ–±—â·¥á–Ω–∏·¥á ·¥®–æ·¥ß—å–∑–æ ô·¥Ä·¥õ·¥á·¥ß—è, –∑·¥Ä ·¥ã–æ·¥õ–æ·¥©–æ·¥¶–æ ·¥¶–æ·¥ß–æ·¥Ñ—É·¥á·¥õ·¥á)\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "·¥®–æ  ô·¥Ñ·¥á ç ·¥õ·¥á—Ö–Ω–∏—á·¥á·¥Ñ·¥ã–∏ ç  ô–æ·¥®·¥©–æ·¥Ñ·¥Ä ç –æ–±·¥©·¥Ä—â·¥Ä·¥õ—å·¥Ñ—è ·¥ã ·¥Ä–¥ ç–∏–Ω–∏·¥Ñ·¥õ·¥©·¥Ä·¥õ–æ·¥©—É.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )

   
    await event.respond(NOMINATIONS[0])


@client.on(events.NewMessage)
async def voting_handler(event):
    if not event.is_private:
        return

    text = event.message.message.strip()

    
    if not text or text.startswith("/") or text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–∞":
        return

    entries = text.split()
    valid_entries = []

    users = load_users()
    
   
    for entry in entries:
        
        if entry.startswith("@"):
            entry = entry[1:]
        
        found = False
        for u in users:
            if str(u.get("id")) == entry or (u.get("username") and u.get("username") == entry):
                found = True
                break
        if found:
            valid_entries.append(entry)
        else:
            await event.respond(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID '{entry}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

    user_id = str(event.sender_id)
    state = user_states.get(user_id)
    if not state:
        return

    
    state["answers"].append({
        "nomination": NOMINATION_NAMES[state["step"]],
        "votes": valid_entries
    })

    state["step"] += 1

    if state["step"] < len(NOMINATIONS):
        nom_text = NOMINATIONS[state["step"]]
        await event.respond(nom_text)
    else:
        buttons = [Button.text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–∞", single_use=True)]
        await event.respond(
            "‚úÖ –í—Å–µ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–∏—Ç—å?\nPS.–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–∞",
            buttons=buttons
        )


@client.on(events.NewMessage(pattern=r'^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–∞$'))
async def submit_handler(event):
    if not event.is_private:
        return
    user_id = str(event.sender_id)
    if user_id not in user_states:
        await event.respond("–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    state = user_states.pop(user_id)
    votes = load_votes()
    
    moscow_tz = pytz.timezone("Europe/Moscow")
    timestamp = datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S') + " (–ø–æ –ú–°–ö)"
    votes[user_id] = {"answers": state["answers"], "time": timestamp}
    save_votes(votes)

    
    site_name = await get_first_name(event.sender_id)
    if not site_name:
        sender = await event.get_sender()
        site_name = sender.first_name if sender else ""
    
    text = f"üìä –ù–æ–≤—ã–π –≥–æ–ª–æ—Å –æ—Ç {event.sender_id} ({site_name})\n\n"
    for answer in state["answers"]:
        nomination = answer["nomination"]
        votes_list = ", ".join(answer["votes"])
        text += f"{nomination}: {votes_list}\n"
    text += f"\n–í—Ä–µ–º—è: {timestamp}"

    
    await client.send_message(YOUR_TELEGRAM_ID, text)
    
    await event.respond("‚úÖ –°–ø–∞—Å–∏–±–æ, —Ç–≤–æ–π –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!")


async def send_stats():
    while True:
        votes = load_votes()
        stats = "„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§\n\n"
        for i, nom in enumerate(NOMINATIONS):
            counter = {}
            for v in votes.values():
                ans = v.get("answers", [])
                if i < len(ans):
                    name = ans[i]
                    counter[name] = counter.get(name, 0) + 1
            stats += f"\n{nom}:\n"
            for name, count in sorted(counter.items(), key=lambda x: -x[1]):
                stats += f"  {name}: {count}\n"
        try:
            await client.send_message(YOUR_TELEGRAM_ID, stats)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", e)
        await asyncio.sleep(43200)  # 12 —á–∞—Å–æ–≤


ALLOWED_STATS_IDS = [380051255, 2123680656]

@client.on(events.NewMessage(pattern=r'/stats'))
async def stats_command(event):
    if event.sender_id not in ALLOWED_STATS_IDS:
        await event.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    votes = load_votes()
    if not votes:
        await event.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    stats = "üì¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):\n\n"
    for user_id, data in votes.items():
        site_name = await get_first_name(int(user_id))
        if not site_name:
            site_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        stats += f"ID {user_id} ({site_name}):\n"
        answers = data.get("answers", [])
        for i, answer in enumerate(answers):
            stats += f"  {NOMINATIONS[i]} {answer}\n"
        stats += f"–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {data.get('time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"

    await event.reply(stats)


async def start_bot():
    await client.start(bot_token=BOT_TOKEN)
    client.loop.create_task(periodic_photo_update())  
    # client.loop.create_task(send_stats())
    await client.run_until_disconnected()


if __name__ == "__main__":
    import asyncio
    asyncio.run(start_bot())
